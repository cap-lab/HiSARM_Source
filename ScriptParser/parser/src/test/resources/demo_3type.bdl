{
    Searcher: Burger burger
    Cover: Tank tank
    Guard: Waffle waffle
}

RemoteControlGroup {
    direction = group_remote_control()
    group_move(direction)
} repeat(100 MSEC)

ReceiveCommand {
    cmd = group_get_cmd()
    if (cmd == "REMOTE_CONTROL"){
        throw REMOTE_CONTROL broadcast
    } else if (cmd == "START") {
        throw START broadcast
    } else if (cmd == "FINISH") {
        throw FINISH broadcast
    }
} repeat(500 MSEC)

Search(target) {
    search(target)
}

Hide {
    hide()
}

Follow {
    follow()
}

Attack {
    attack()
}

GetAlarm(team_name) {
    ALARM = receive(team_name, ALERT)
    if (ALARM == "TRUE") {
        throw HIDE broadcast
    }
    if (ALARM == "FALSE") {
        throw RESTART broadcast
    }
}

Watch(team_name, signal) {
    ALERT = monitor(signal)
    if (ALERT != signal) {
        send(team_name, ALERT)
    }
}

Mode.REMOTE_CONTROL {
    services:
        RemoteControlGroup
        ReceiveCommand
}

Mode.SEARCH(target, team_name) {
    services:
        Search(tareget)
        GetAlarm(team_name)
        ReceiveCommand
}

Mode.HIDE(team_name) {
    services:
        Hide
        GetAlarm(team_name)
        ReceiveCommand
}


Mode.FOLLOW {
    services:
        Follow
        ReceiveCommand
}

Mode.COVER {
    services:
        Attack
        ReceiveCommand
}

Mode.WATCH(team_name) {
    services:
        Watch(team_name, "FALSE")
        ReceiveCommand
}

Mode.GUARD(team_name) {
    services:
        Watch(team_name, "TRUE")
        Attack
        ReceiveCommand
}

Main.Searcher {
    case(REMOTE_CONTROL):
        catch(START): mode = SEARCH(target, "Guard")
    case(SEARCH):
        catch(FINISH): mode = FINISH
        catch(HIDE): mode = HIDE("Guard")
        catch(REMOTE_CONTROL): mode = REMOTE_CONTROL
    case(HIDE):
        catch(RESTART): mode = PREVIOUS_MODE
        catch(START): mode = SEARCH(target, "Guard")
        catch(REMOTE_CONTROL): mode = REMOTE_CONTROL
    default: mode = REMOTE_CONTROL
}

Main.Cover {
    case(REMOTE_CONTROL):
        catch(START): mode = FOLLOW
    case(FOLLOW):
        catch(FINISH): mode = FINISH
        catch(REMOTE_CONTROL): mode = REMOTE_CONTROL
        catch(HIDE): mode = COVER
    case(COVER):
        catch(RESTART): mode = PREVIOUS_MODE
    default: mode = REMOTE_CONTROL
}

Main.Guard {
    case(REMOTE_CONTROL):
        catch(START): mode = WATCH("Searcher")
    case(WATCH):
        catch(FINISH): mode = FINISH
        catch(HIDE): mode = GUARD("Searcher")
    case(GUARD):
        catch(RESTART): mode = PREVIOUS_MODE
    default: mode = REMOTE_CONTROL
}